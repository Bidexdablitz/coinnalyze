type Candle {
  openTime: String
  open: Float
  high: Float
  low: Float
  close: Float
  volume: String
  closeTime: String
  quoteVolume: String
  trades: Int
  baseAssetVolume: String
  quoteAssetVolume: String
}
type Ticker {
  eventType: String
  eventTime: Int
  symbol: String
  priceChange: String
  priceChangePercent: Float
  weightedAvg: String
  prevDayClose: Float
  curDayClose: Float
  closeTradeQuantity: String
  bestBid: String
  bestBidQnt: String
  bestAsk: String
  bestAskQnt: String
  open: Float
  high: Float
  low: Float
  volume: String
  volumeQuote: String
  openTime: String
  closeTime: String
  firstTradeId: Int
  lastTradeId: Int
  totalTrades: Int
}
type TickerOfficial {
  symbol: String
  priceChange: Float
  priceChangePercent: Float
  weightedAvgPrice: Float
  prevClosePrice: Float
  lastPrice: Float
  lastQty: Float
  bidPrice: Float
  bidQty: Float
  askPrice: Float
  askQty: Float
  openPrice: Float
  highPrice: Float
  lowPrice: Float
  volume: Float
  quoteVolume: Float
  openTime: String
  closeTime: String
  firstId: String
  lastId: String
  count: String
}
type News {
  article_id: String
  title: String
  link: String
  keywords: [String]
  creator: [String]
  video_url: String
  description: String
  content: String
  pubDate: String
  image_url: String
  source_id: String
  source_url: String
  source_icon: String
  source_priority: Int
  country: [String]
  category: [String]
  language: String
  ai_tag: String
  sentiment: String
  sentiment_stats: String
  ai_region: String
}
type NewsResponse {
  status: String
  totalResults: Int
  results: [News]
  nextPage: String
}
type Query {
  candles(symbol: String): [Candle!]!
  tickers(symbols: [String!]!): [TickerOfficial!]!
  symbols(symbols: [String]): [TickerOfficial!]!
  news(nextPage: String): NewsResponse
}
type Subscription {
  ticker(symbols: [String!]!): Ticker!
}
